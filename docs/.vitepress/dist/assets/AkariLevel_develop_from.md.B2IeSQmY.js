import{_ as l,c as e,o as i,a1 as _}from"./chunks/framework.DCKU21so.js";const P=JSON.parse('{"title":"📨 来源","description":"","frontmatter":{},"headers":[],"relativePath":"AkariLevel/develop/from.md","filePath":"AkariLevel/develop/from.md"}'),t={name:"AkariLevel/develop/from.md"},E=_('<h1 id="📨-来源" tabindex="-1">📨 来源 <a class="header-anchor" href="#📨-来源" aria-label="Permalink to &quot;📨 来源&quot;">​</a></h1><p>当你调用插件API时，通常需要声明该操作的来源，用于辨别事件发生的不同场景。</p><p>AkariLevel 中定义了部分事件来源：</p><ul><li>PlayerExpChangeEvent <ul><li>COMMAND_ADD_EXP</li><li>COMMAND_REMOVE_EXP</li><li>COMMAND_SET_EXP</li><li>MYTHICMOBS_DROP_EXP</li><li>VANILLA_EXP_CHANGE</li></ul></li><li>PlayerLevelChangeEvent <ul><li>COMMAND_ADD_LEVEL</li><li>COMMAND_REMOVE_LEVEL</li><li>COMMAND_SET_LEVEL</li></ul></li><li>PlayerLevelupEvent <ul><li>COMMAND_LEVELUP</li></ul></li><li>PlayerRefreshLevelEvent <ul><li>COMMAND_ADD_EXP</li><li>COMMAND_REMOVE_EXP</li><li>COMMAND_SET_EXP</li><li>COMMAND_ADD_LEVEL</li><li>COMMAND_REMOVE_LEVEL</li><li>COMMAND_SET_LEVEL</li><li>LISTENER_PLAYER_JOIN</li></ul></li></ul><p>同时你也可以在自己的插件中声明其他来源，命名规则通常是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;&gt; - 必填部分   [] - 选填部分</span></span></code></pre></div><p>其中所有字母均大写，不同部分之间使用 下划线_ 来连接。</p><ul><li>&lt;插件名称&gt;<em>[模块]</em>[操作类型]_[操作对象]</li></ul><p>以下所示的来源命名方式是被提倡的：</p><ol><li>EXAMPLEPLUGIN（ &lt;插件名称&gt; ）</li><li>EXAMPLEPLUGIN_LISTENER（ &lt;插件名称&gt;_[模块] ）</li><li>EXAMPLEPLUGIN_LISTENER_PLAYERFISH（ &lt;插件名称&gt;<em>[模块]</em>[操作类型] ）</li><li>EXAMPLEPLUGIN_DROP_EXP（ &lt;插件名称&gt;<em>[操作类型]</em>[操作对象] ）</li><li>EXAMPLEPLUGIN_COMMAND_GET_REWARD （ &lt;插件名称&gt;<em>[模块]</em>[操作类型] _[操作对象] ）</li></ol><p>详细的来源填写有利于不同插件对同一操作发生不同场景的辨别。</p>',11),a=[E];function o(s,p,r,n,M,L){return i(),e("div",null,a)}const c=l(t,[["render",o]]);export{P as __pageData,c as default};
